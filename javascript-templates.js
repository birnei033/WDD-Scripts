jQuery(document).ready(function () {
    
});

// DETECT SCROLL DIRECTION
var scrollTop = 0;
document.onscroll = function(e){
    var html = document.querySelector('html'); //just a sample
	var header = document.querySelector('header selector'); //just a sample
    var st = window.pageYOffset || document.documentElement.scrollTop;
    if(html){
		if(header){
            if(st > scrollTop){
                // downscroll code
                console.log('down '+st);
            }else{
                // upscroll code
                console.log('up '+ st);
            }
		}
    scrollTop = st <= 0 ? 0 : st;
    }
}
// #####DETECT SCROLL DIRECTION END ##########################

 

// CLOCK WITH DATE

function getMonth(index){
	var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	return months[index];
}
function getDay(index){
	var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Firday',' Satruday'];
	return days[index];
}



jQuery(document).ready(function ($) {
function startTime() {
    var today = new Date();
    var month =  getMonth(today.getMonth());
    var day = getDay(today.getDay());
    var date = today.getDate();
    var date_for_switch = checkTime(date);
    switch (date_for_switch[1]) {
        case "1": date = date+"st"; break;
        case "2": date = date+ "nd"; break;
        case "3": date = date+ "rd"; break;
        default: date = date+ "th"; break;
    }
    var h = today.getHours();
    var ampm = h >= 12 ? 'PM' : 'AM';
    h = h % 12;
    h = h ? h : 12; // the hour '0' should be '12'
    var m = today.getMinutes();
    var s = today.getSeconds();
    var y = today.getFullYear();
    m = checkTime(m);
    s = checkTime(s);
    var thetime =  day + " " + date + " of " + month + " "+ y + " " + h + ":" + m  +":"+s+" "+ampm+ " PHT";
    jQuery('div#date-and-time > span').html(thetime);
    var t = setTimeout(startTime, 500);
}
function checkTime(i) {
    if (i < 10) {i = "0" + i};  // add zero in front of numbers < 10
    return i;
}
	
startTime(); //CALLING
});
// #############END########################

// Timezone converter
function convertTimeZone(date, timeZoneString) {
    return new Promise((resolve, reject)=>{
      resolve(new Date((typeof date === "string" ? new Date(date) : date).toLocaleString("en-US", {timeZone: timeZoneString})));
    }); 
}
// usage
var localtimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
var datetime = "2022-04-23 17:00:00 +10"; //sample date
convertTimeZone(datetime, localtimezone).then(covertedTime=>{
    var d = covertedTime.getDate();
    var Y = covertedTime.getFullYear();
    var m = getMonth(covertedTime.getMonth());
    var fullDate = m + " " + d +", " + Y;
    var time = formatAMPM(covertedTime);
    console.log(fullDate +" "+time);
});
// ######### End timezone converter

// Format AM/PM
function formatAMPM(date) {
   
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? 'pm' : 'am';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0'+minutes : minutes;
    var strTime = hours + ':' + minutes + ' ' + ampm;
    return strTime;
  }

//   with promise
function formatAMPM(date) {
    return new Promise((resolve, reject)=>{
      if(typeof date == "object"){
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var ampm = hours >= 12 ? 'pm' : 'am';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        minutes = minutes < 10 ? '0'+minutes : minutes;
        var strTime = hours + ':' + minutes + ' ' + ampm;
        resolve(strTime);
      }else{
        reject("error: parameter type is: "+typeof date+". Must use Date object");
      }
    });
  }
  // usage with promise
  formatAMPM(new Date("2022-04-23 17:00:00 +10"))
    .then(time=>console.log(time));

//   end format AM/PM

// GET QUERY STRING 1
const params = new Proxy(new URLSearchParams(window.location.search), {
  get: (searchParams, prop) => searchParams.get(prop),
});

// GET QUERY STRING 2
const getQueryParams = (params, url) => {
  let href = url
  //this expression is to get the query strings
  let reg = new RegExp("[?&]" + params + "=([^&#]*)", "i")
  let queryString = reg.exec(href)
  return queryString ? queryString[1] : null
}

/**
 * Script I use to download the pdf generated by mpdf using ajax.
 * using xhrFields and script inside success function
 */
jQuery.ajax({
  type: "POST",
  url: "/wp-admin/admin-ajax.php",
  data: {action: "handle_ajax_shortcode", request: "get-pdf"},
  xhrFields: {
      responseType: 'blob'
  },
  success: function (data) {
    //Convert the Byte Data to BLOB object.
      var blob = new Blob([data], { type: "application/octetstream" });
          var fileName = "bmco-product-list.pdf";
      //Check the Browser type and download the File.
      var isIE = false || !!document.documentMode;
      if (isIE) {
          window.navigator.msSaveBlob(blob, fileName);
      } else {
          var url = window.URL || window.webkitURL;
          link = url.createObjectURL(blob);
          var a = jQuery("<a />");
          a.attr("download", fileName);
          a.attr("href", link);
          jQuery("body").append(a);
          a[0].click();
          jQuery("body").remove(a);
      }
      jQuery('.search-loader').remove();
  }
});